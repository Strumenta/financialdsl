buildscript {
    ext.kotlin_version = '1.2.60'
    ext.antlrKotlinVersion = "6167dc7090"

    repositories {
        mavenCentral()
        mavenLocal()
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.strumenta.antlr-kotlin:antlr-kotlin-gradle-plugin:${antlrKotlinVersion}"
    }
}

apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'com.strumenta.antlrkotlin'

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://jitpack.io' }
}

dependencies {
    compile "com.strumenta.antlr-kotlin:antlr-kotlin-runtime-common:${antlrKotlinVersion}"
    compile "com.strumenta.antlr-kotlin:antlr-kotlin-runtime-jvm:${antlrKotlinVersion}"

    compile "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testCompile 'junit:junit:4.12'
}

task('ensureGeneratedSrcAntlrExist') {
    doLast {
        def folder = new File( projectDir.path + '/generated-src/antlr/' )
        if( !folder.exists() ) {
            println("Creating directory $folder")
            folder.mkdirs()
        }
    }
}

generateKotlinGrammarSource {
    maxHeapSize = "64m"
    arguments += ['-package', 'com.strumenta.financialdsl']
    outputDirectory = new File("generated-src/antlr/".toString())
}
generateKotlinGrammarSource.dependsOn ensureGeneratedSrcAntlrExist
compileKotlin.dependsOn generateKotlinGrammarSource
sourceSets {
    generated {
        kotlin.srcDir 'generated-src/antlr/'
    }
}
compileKotlin.source sourceSets.generated.kotlin, sourceSets.main.kotlin

clean{
    delete "generated-src"
}

idea {
    module {
        sourceDirs += file("generated-src/antlr/")
    }
}

test {
    dependsOn 'cleanTest'
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task listAllDependencies(type: DependencyReportTask) {}


